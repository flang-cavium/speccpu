#------------------------------------------------------------------------------
# SPEC CPU2017 config file for: LLVM / Linux / AArch64
#------------------------------------------------------------------------------
#
# Usage: (1) Copy this to a new name
#             cd $SPEC/config
#             cp Example-x.cfg myname.cfg
#        (2) Change items that are marked 'EDIT' (search for it)
#
# SPEC tested this config file with:
#    Compiler version(s):     LLVM/3.9.0
#    Operating system(s):     Linux
#    Hardware:                AMD64
#
# If your system differs, this config file might not work.
# You might find a better config file at http://www.spec.org/cpu2017/results
#
# Compiler issues: Contact your compiler vendor, not SPEC.
# For SPEC help:   http://www.spec.org/cpu2017/Docs/techsupport.html
#------------------------------------------------------------------------------


#--------- Label --------------------------------------------------------------
# Arbitrary string to tag binaries
#                  Two Suggestions: # (1) EDIT this label as you try new ideas.
%define label cavium                # (2)      Use a label meaningful to *you*.


#--------- Preprocessor -------------------------------------------------------
%ifndef %{bits}                # EDIT to control 32 or 64 bit compilation.  Or,
%   define  bits        64     #      you can set it on the command line using:
%endif                         #      'runcpu --define bits=nn'

%ifndef %{build_ncpus}         # EDIT to adjust number of simultaneous compiles.
%   define  build_ncpus 16     #      Or, you can set it on the command line:
%endif                         #      'runcpu --define build_ncpus=nn'

# Don't change this part.
%define  os          LINUX
%if %{bits} == 64
%   define model
%elif %{bits} == 32
%   define model        -m32
%else
%   error Please define number of bits - see instructions in config file
%endif


#--------- Global Settings ----------------------------------------------------
# For info, see:
#            https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune

# backup_config         = 0    # Uncomment for cleaner config/ directory
flagsurl01              = $[top]/config/flags/gcc.xml
flagsurl02              = $[top]/config/flags/clang.xml
ignore_errors           = 1
iterations              = 1
label                   = %{label}-m%{bits}
line_width              = 1020
log_line_width          = 1020
makeflags               = --jobs=%{build_ncpus}
mean_anyway             = 1
output_format           = txt,html,cfg,pdf,csv

preenv                  = 1
tune                    = peak

# ----------------- Run with perf stat monitoring ---------------------------
# monitor_pre_bench       = perf stat -x , -I 10000 -ecycles,instructions,r23,r24,r13,r16,r17,r18,r150,r151,r152,r153,r100,r207,r74,r75,r77 -o ${top}/result/perf_${baseexe}_${lognum}.csv -- sleep 100000 &
# monitor_post_bench      = killall perf
# ----------------- Run with perf stat monitoring ---------------------------

#--------- How Many CPUs? -----------------------------------------------------
# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
#    - For SPECrate,  you set the number of copies.
#    - For SPECspeed, you set the number of threads.
# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
#
#    q. How many should I set?
#    a. Unknown, you will have to try it and see!
#
# To get you started:
#
#     copies - This config file sets 1 copy per core (after you set the
#              'cpucores' variable, just below).
#              Please be sure you have enough memory; if you do not, you might
#              need to run a smaller number of copies.  See:
#              https://www.spec.org/cpu2017/Docs/system-requirements.html#memory
#
#     threads - This config file sets a starting point.  You can try adjusting it.
#               Higher thread counts are much more likely to be useful for
#               fpspeed than for intspeed.
#
#
# To do so, please adjust these; also adjust the 'numactl' lines, below

                               # EDIT to define system sizes
%define  cpucores       1      #         number of physical cores
%define  cputhreads     32     #         number of logical cores
%define  numanodes      32     #         number of NUMA nodes for affinity

intrate,fprate:
   copies                  = 32 # %{cpucores}
intspeed,fpspeed:
   threads                 = 32 # %{cputhreads}

#-------- CPU binding for rate -----------------------------------------------
# When you run multiple copies for SPECrate mode, performance
# is improved if you bind the copies to specific processors.
# EDIT the numactl stuff below.

intrate,fprate:
submit       = echo "$command" > run.sh ; $BIND bash run.sh

# Affinity settings:                     EDIT this section
# Please adjust these values for your
# particular system as these settings are
# for an 8 core, one NUMA node (-m 0) system.
bind0	= numactl -m 0 --physcpubind=0
bind1	= numactl -m 0 --physcpubind=1
bind2	= numactl -m 0 --physcpubind=2
bind3	= numactl -m 0 --physcpubind=3
bind4	= numactl -m 0 --physcpubind=4
bind5	= numactl -m 0 --physcpubind=5
bind6	= numactl -m 0 --physcpubind=6
bind7	= numactl -m 0 --physcpubind=7
bind8   = numactl -m 0 --physcpubind=8
bind9   = numactl -m 0 --physcpubind=9
bind10  = numactl -m 0 --physcpubind=10
bind11  = numactl -m 0 --physcpubind=11
bind12  = numactl -m 0 --physcpubind=12
bind13  = numactl -m 0 --physcpubind=13
bind14  = numactl -m 0 --physcpubind=14
bind15  = numactl -m 0 --physcpubind=15
bind16  = numactl -m 0 --physcpubind=16
bind17  = numactl -m 0 --physcpubind=17
bind18  = numactl -m 0 --physcpubind=18
bind19  = numactl -m 0 --physcpubind=19
bind20  = numactl -m 0 --physcpubind=20
bind21  = numactl -m 0 --physcpubind=21
bind22  = numactl -m 0 --physcpubind=22
bind23  = numactl -m 0 --physcpubind=23
bind24  = numactl -m 0 --physcpubind=24
bind25  = numactl -m 0 --physcpubind=25
bind26  = numactl -m 0 --physcpubind=26
bind27  = numactl -m 0 --physcpubind=27
bind28  = numactl -m 0 --physcpubind=28
bind29  = numactl -m 0 --physcpubind=29
bind30  = numactl -m 0 --physcpubind=30
bind31  = numactl -m 0 --physcpubind=31

#------- Compilers ------------------------------------------------------------
default:
# EDIT paths to LLVM and libraries:
    BASE_DIR           = /
    # LLVM_PATH specifies the directory path containing required LLVM files and
    # potentially multiple LLVM versions.
    LLVM_PATH          = $[BASE_DIR]/opt
    # LLVM_ROOT_PATH specifies the directory path to the LLVM version to be
    # used. EDIT: Change llvm-v390 to appropriate directory name.
    LLVM_ROOT_PATH     = $[LLVM_PATH]/cavium
    LLVM_BIN_PATH      = $[LLVM_ROOT_PATH]/bin
    LLVM_LIB_PATH      = $[LLVM_ROOT_PATH]/lib
    LLVM_INCLUDE_PATH  = $[LLVM_ROOT_PATH]/include
    DRAGONEGG_PATH     = # $[LLVM_PATH]/dragonegg
    DRAGONEGG_SPECS    = # $[DRAGONEGG_PATH]/integrated-as.specs
    GFORTRAN_DIR       = $[LLVM_ROOT_PATH]/bin
    # Specify Intel OpenMP library path.
    OPENMP_DIR         = $[LLVM_ROOT_PATH]

    preENV_PATH        = $[LLVM_BIN_PATH]:%{ENV_PATH}

    CC                  = $(LLVM_BIN_PATH)/clang %{model}
    CXX                 = $(LLVM_BIN_PATH)/clang++ %{model}
    FORTRAN_COMP        = $(GFORTRAN_DIR)/flang
    FC                  = $(FORTRAN_COMP) %{model}
    CLD                 = $(LLVM_BIN_PATH)/clang %{model}
    FLD                 = $(GFORTRAN_DIR)/flang %{model}
    # How to say "Show me your version, please"
    CC_VERSION_OPTION   = -v
    CXX_VERSION_OPTION  = -v
    FC_VERSION_OPTION   = -v

default:
%if %{bits} == 64
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = 64-bit
%else
   sw_base_ptrsize = 32-bit
   sw_peak_ptrsize = 32-bit
%endif

intrate,intspeed:                     # 502.gcc_r and 602.gcc_s may need the
%if %{bits} == 32                     # flags from this section.  For 'base',
    EXTRA_COPTIMIZE = -fgnu89-inline  # all benchmarks must use the same
%else                                 # options, so we add them to all of
    LDCFLAGS        = -z muldefs      # integer rate and integer speed.  See:
%endif                                # www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html

#--------- Portability --------------------------------------------------------
# data model applies to all benchmarks

default:
%if %{bits} == 32
    # Strongly recommended because at run-time, operations using modern file
    # systems may fail spectacularly and frequently (or, worse, quietly and
    # randomly) if a program does not accommodate 64-bit metadata.
    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
%else
    EXTRA_PORTABILITY = -DSPEC_LP64 -DSPEC_LINUX
%endif

# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
%if %{bits} == 32
%   define suffix ARM
%else
%   define suffix AARCH64
%endif
   PORTABILITY    = -DSPEC_%{os}_%{suffix}
   FPORTABILITY   = -std=f90 -Mbyteswapio -Mallocatable=03

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -Mbyteswapio -Mallocatable=03

523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
   PORTABILITY   = -DSPEC_%{os}

526.blender_r:  #lang='CXX,C'
    CPORTABILITY = -funsigned-char -std=gnu99
    CXXPORTABILITY = -D__BOOL_DEFINED -std=gnu++98

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG
   FPORTABILITY = -Mbyteswapio -Mallocatable=03

628.pop2_s:  #lang='F,C'
    CPORTABILITY = -DSPEC_CASE_FLAG
    FPORTABILITY = -Mbyteswapio -Mallocatable=03

#--------  Baseline Tuning Flags ----------------------------------------------

# jemalloc is very useful to gcc.
502.gcc_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    EXTRA_FFLAGS  =
    EXTRA_FLIBS   = -lm -lstdc++
    LDOPTIMIZE    = -ljemalloc -z muldefs

526.blender_r=base:
    COPTIMIZE     = -O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast  -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    =

# jemalloc is toxic to bwaves.
503.bwaves_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -ffast-math -ffp-contract=fast -freciprocal-math -ffast-math -ffp-contract=fast -Mcache_align -Mallocatable=03 -Mbyteswapio
    LDOPTIMIZE    =

# jemalloc is *** VERY *** useful to cactusBSSN: ratio 99.12 vs. 32.29.
507.cactuBSSN_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflang -lflangrti -lpgmath

# jemalloc gives 15 seconds boost on parest.
510.parest_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++03 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc

# jemalloc is not useful to wrf.
521.wrf_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    =

# jemalloc gives 10 seconds boost on cam4.
527.cam4_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc

# imagick is better without jemalloc.
538.imagick_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    =

# jemalloc is slightly useful for nab.
544.nab_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc

# jemalloc is very useful to exchange2
# Polly is very useful to exchange2
548.exchange2_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -mllvm -polly -mllvm -polly-vectorizer=stripmine -mllvm -polly-codegen-generate-expressions -mllvm -polly-stmt-granularity=scalar-indep -mllvm -polly-ignore-aliasing
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -mllvm -polly -mllvm -polly-vectorizer=stripmine -mllvm -polly-codegen-generate-expressions -mllvm -polly-stmt-granularity=scalar-indep -mllvm -polly-ignore-aliasing
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -mllvm -polly -mllvm -polly-vectorizer=stripmine -mllvm -polly-codegen-generate-expressions -mllvm -polly-stmt-granularity=scalar-indep -mllvm -polly-ignore-aliasing
    LDOPTIMIZE    = -ljemalloc

# jemalloc is useful to fotonik3d
549.fotonik3d_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -fomit-frame-pointer -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -fomit-frame-pointer -funroll-loops -finline-functions -fslp-vectorize fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -fomit-frame-pointer -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc

# jemalloc is toxic to specrand
997.specrand_fr=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    EXTRA_FFLAGS  =
    EXTRA_FLIBS   = -lm -lflang -lflangrti -lstdc++
    LDOPTIMIZE    = -z muldefs -lflangrti -lflang

# jemalloc is toxic to specrand
999.specrand_ir=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    EXTRA_FFLAGS  =
    EXTRA_FLIBS   = -lm -lflang -lflangrti -lstdc++
    LDOPTIMIZE    = -z muldefs -lflangrti -lflang

554.roms_r=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc

default=base:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    EXTRA_FFLAGS  =
    EXTRA_FLIBS   = -lm -lflang -lflangrti -lstdc++
    LDOPTIMIZE    = -ljemalloc -z muldefs -lpgmath -lflangrti -lflang

intrate,fprate:
    preENV_LIBRARY_PATH     = $[LLVM_LIB_PATH]
    preENV_LD_LIBRARY_PATH  = $[LLVM_LIB_PATH]
   # preENV_LIBRARY_PATH     = $[LLVM_LIB_PATH]:%{ENV_LIBRARY_PATH}
   # preENV_LD_LIBRARY_PATH  = $[LLVM_LIB_PATH]:%{ENV_LD_LIBRARY_PATH}

#
# Speed (OpenMP and Autopar allowed)
#
%if %{bits} == 32
   intspeed,fpspeed:
   #
   # Many of the speed benchmarks (6nn.benchmark_s) do not fit in 32 bits
   # If you wish to run SPECint2017_speed or SPECfp2017_speed, please use
   #
   #     runcpu --define bits=64
   #
   fail_build = 1
%else
   intspeed,fpspeed:
       OPTIMIZE                 = -fopenmp
       EXTRA_OPTIMIZE           = -DUSE_OPENMP -DSPEC_OPENMP -I$[OPENMP_DIR]/include
       OPENMP_LIB_PATH          =  $[LLVM_ROOT_PATH]/lib
       EXTRA_LIBS               = -lm -lstdc++ -lomp
       EXTRA_FLIBS              = -lm -lflang -lflangrti -lpgmath -lomp
       preENV_LIBRARY_PATH      =
       preENV_LD_LIBRARY_PATH   =
       preENV_LIBRARY_PATH      =
       preENV_LD_LIBRARY_PATH   =
       preENV_OMP_THREAD_LIMIT  = 28
       preENV_OMP_NUMTHREADS    = 28
       preENV_OMP_STACKSIZE     = 128M
       preENV_GOMP_CPU_AFFINITY = 0-28
       # preENV_GOMP_CPU_AFFINITY = 0-%{cputhreads}
%endif

#--------  Peak Tuning Flags ----------------------------------------------
default=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops -lflang -lflangrti
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize -funroll-loops -lflang -lflangrti
    EXTRA_LIBS   = -lm -lflang -lflangrti
    EXTRA_FLIBS  = -lm -lflang -lflangrti
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -lflangrti -lflang
    EXTRA_FFLAGS  = -lflang -lflangrti

502.gcc_r=peak:  #lang='C'
    LDOPTIMIZE    = -ljemalloc -z muldefs -lflangrti -lflang

521.wrf_r=peak:  #lang='F,C'
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    EXTRA_FLIBS   = -lm -lflang
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang
    EXTRA_FFLAGS  =

523.xalancbmk_r=peak:  #lang='CXX
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

526.blender_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++98 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -lflangrti -lflang

503.bwaves_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f77 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

# jemalloc is *very* useful to cactusBSSN.
507.cactuBSSN_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -std=gnu99 -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

510.parest_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++03 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -pthread -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

520.omnetpp_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang -lstdc++

527.cam4_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

538.imagick_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

549.fotonik3d_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

554.roms_r=peak:
    COPTIMIZE     = -O3 -std=gnu99 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    CXXOPTIMIZE   = -O3 -std=gnu++11 -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -ffp-contract=fast -funroll-loops -finline-functions -fslp-vectorize -fvectorize
    FOPTIMIZE     = -O3 -std=f95 -mcpu=thunderx2t99 -march=armv8.1-a+lse -funroll-loops -finline-functions -fslp-vectorize -fvectorize -freciprocal-math -ffast-math -ffp-contract=fast -Mfreeform -Mcache_align -Mallocatable=03
    LDOPTIMIZE    = -ljemalloc -lflangrti -lflang

#------------------------------------------------------------------------------
# Tester and System Descriptions - EDIT all sections below this point
#------------------------------------------------------------------------------
#   For info about any field, see
#             https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory
#-------------------------------------------------------------------------------

#--------- EDIT to match your version -----------------------------------------
default:
   sw_compiler001   = C/C++: Version 6.0.1-20180521 of Clang, The
   sw_compiler002   = LLVM Compiler Infrastructure

#--------- EDIT info about you ------------------------------------------------
# To understand the difference between hw_vendor/sponsor/tester, see:
#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
intrate,intspeed,fprate,fpspeed: # Important: keep this line
   hw_vendor          = Cavium
   tester             = Stefan Teleman
   test_sponsor       = Cavium
   license_num        = nnn (Your SPEC license number)
#  prepared_by        = # Ima Pseudonym                       # Whatever you like: is never output


#--------- EDIT system availability dates -------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
                        # Example                             # Brief info about field
   hw_avail           = # Nov-2099                            # Date of LAST hardware component to ship
   sw_avail           = # Nov-2099                            # Date of LAST software component to ship

#--------- EDIT system information --------------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
                        # Example                             # Brief info about field
   hw_cpu_name        = Cavium ThunderX2 T99                  # chip name
   hw_cpu_nominal_mhz = 2000                                  # Nominal chip frequency, in MHz
   hw_cpu_max_mhz     = 2000                                  # Max chip frequency, in MHz
 # hw_disk            = # 9 x 9 TB SATA III 9999 RPM          # Size, type, other perf-relevant info
   hw_model           = # TurboBlaster 3000                   # system model name
   hw_nchips          = 1                                     # number chips enabled
   hw_ncores          = 32                                    # number cores enabled
   hw_ncpuorder       = # 1-9 chips                           # Ordering options
   hw_nthreadspercore = 1                                     # number threads enabled per core
   hw_other           = # TurboNUMA Router 10 Gb              # Other perf-relevant hw, or "None"

#  hw_memory001       = # 999 GB (99 x 9 GB 2Rx4 PC4-2133P-R, # The 'PCn-etc' is from the JEDEC
#  hw_memory002       = # running at 1600 MHz)                # label on the DIMM.

   hw_pcache          = 32KB I + 32KB D on chip per 32 cores  # Primary cache size, type, location
   hw_scache          = # 99 KB I+D on chip per 9 cores       # Second cache or "None"
   hw_tcache          = # 9 MB I+D on chip per chip           # Third  cache or "None"
   hw_ocache          = # 9 GB I+D off chip per system board  # Other cache or "None"

   fw_bios            = # American Megatrends 39030100 02/29/2016 # Firmware information
   sw_file            = ext4                                  # File system
   sw_os001           = Ubuntu Xenial Xerus                   # Operating system
   sw_os002           = 16.04.1 LTS                           # and version
   sw_other           = # TurboHeap Library V8.1              # Other perf-relevant sw, or "None"
 # sw_state           = # Run level 99                        # Software state.

# Note: Some commented-out fields above are automatically set to preliminary
# values by sysinfo
#       https://www.spec.org/cpu2017/Docs/config.html#sysinfo
# Uncomment lines for which you already know a better answer than sysinfo

